# This starter workflow is for a CMake project running on multiple platforms. There is a different starter workflow if you just want a single platform.
# See: https://github.com/actions/starter-workflows/blob/main/ci/cmake-single-platform.yml
name: CMake on multiple platforms

on:
  push:
    branches: [ "develop-cicd" ]
  pull_request:
    branches: [ "develop-cicd" ]

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      # Set fail-fast to false to ensure that feedback is delivered for all matrix combinations. Consider changing this to true when your workflow is stable.
      fail-fast: false

      # Set up a matrix to run the following 3 configurations:
      # 1. <Windows, Release, latest MSVC compiler toolchain on the default runner image, default generator>
      # 2. <Linux, Release, latest GCC compiler toolchain on the default runner image, default generator>
      # 3. <Linux, Release, latest Clang compiler toolchain on the default runner image, default generator>
      #
      # To add more build types (Release, Debug, RelWithDebInfo, etc.) customize the build_type list.
      matrix:
        os: [ubuntu-latest, windows-latest]
        build_type: [Release]
        c_compiler: [gcc, cl]
        include:
          - os: windows-latest
            c_compiler: cl
            cpp_compiler: cl
          - os: ubuntu-latest
            c_compiler: gcc
            cpp_compiler: g++
        exclude:
          - os: windows-latest
            c_compiler: gcc
          - os: windows-latest
            c_compiler: clang
          - os: ubuntu-latest
            c_compiler: cl
        config:
          - os: ubuntu-latest
          - os: windows-latest
            preset: win-x64-release
    steps:
    - name: Checkout repository and submodules
      uses: actions/checkout@v3
      with:
        submodules: 'true'
    - name: Pull submodules
      run: git submodule foreach git pull origin main

    - name: Install Qt
      uses: jurplel/install-qt-action@v3

    - name: Linux depends
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update -y
        sudo apt-get install -y libpcre2-dev libudev-dev libmtdev-dev  libinput-dev libdrm-dev libgbm-dev    \
        libgtk-3-dev libkrb5-dev
        # ssl libsodium sqlite sqlcipher
        sudo apt-get install -y libssl-dev libcrypt-dev libsodium-dev libsqlite3-dev libsqlcipher-dev
        # xcb
        sudo apt-get install -y libxcb* libxkb* libfontconfig1-dev \
        libfreetype6-dev libx11-dev libx11-xcb-dev \
        libxext-dev libxfixes-dev libxi-dev libxrender-dev libxss-dev
        # Multimedia
        sudo apt-get install -y libasound2-dev libunwind-dev libgstreamer1.0-dev \
        libgstreamer-plugins-base1.0-dev libgstreamer-plugins-good1.0-dev \
        libgstreamer-plugins-bad1.0-dev libpulse-dev libpulse-mainloop-glib0 libopenal-dev
        # sqlite sqlcipher
        sudo apt install -y libsqlite3-dev libsqlcipher-dev
        # ffmpeg vpx qrencode sodium
        sudo apt install -y libvpx-dev libjpeg-dev libexif-dev libtiff-dev libpng16-16 libpng-dev libavcodec-dev libavdevice-dev libqrencode-dev libsodium-dev libopenal-dev

    - name: Native Tools Command Prompt.
      if: matrix.os == 'windows-latest'
      uses: ilammy/msvc-dev-cmd@v1.10.0
      with:
        arch: ${{ matrix.arch }}

    - name: vcpkg build
      if: matrix.os == 'windows-latest'
      uses: lukka/run-vcpkg@v11

    - name: Set reusable strings
      # Turn repeated input strings (such as the build output directory) into step outputs. These step outputs can be used throughout the workflow file.
      id: strings
      shell: bash
      run: |
        echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"

    - name: Configure CMake for windows
      if: matrix.os == 'windows-latest'
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: >
        cmake -B ${{ steps.strings.outputs.build-output-dir }}
        -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }}
        -DCMAKE_C_COMPILER=${{ matrix.c_compiler }}
        -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
        -DCMAKE_TOOLCHAIN_FILE="$env:VCPKG_ROOT/scripts/buildsystems/vcpkg.cmake"
        -S ${{ github.workspace }}

    - name: Configure CMake for ubuntu
      if: matrix.os == 'ubuntu-latest'

      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: >
        cmake -B ${{ steps.strings.outputs.build-output-dir }}
        -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }}
        -DCMAKE_C_COMPILER=${{ matrix.c_compiler }}
        -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
        -S ${{ github.workspace }}    

    - name: Build
      # Build your program with the given configuration. Note that --config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
      run: cmake --build ${{ steps.strings.outputs.build-output-dir }} --config ${{ matrix.build_type }}

    - name: Test
      working-directory: ${{ steps.strings.outputs.build-output-dir }}
      # Execute tests defined by the CMake configuration. Note that --build-config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: ctest --build-config ${{ matrix.build_type }}
